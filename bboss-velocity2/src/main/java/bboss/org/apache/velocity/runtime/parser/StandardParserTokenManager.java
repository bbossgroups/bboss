/* StandardParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. StandardParserTokenManager.java */
package bboss.org.apache.velocity.runtime.parser;
import bboss.org.apache.velocity.runtime.parser.node.*;
import java.io.*;
import java.util.*;
import bboss.org.apache.velocity.Template;
import bboss.org.apache.velocity.exception.VelocityException;
import bboss.org.apache.velocity.runtime.RuntimeServices;
import bboss.org.apache.velocity.runtime.parser.*;
import bboss.org.apache.velocity.runtime.parser.node.*;
import bboss.org.apache.velocity.runtime.directive.*;
import bboss.org.apache.velocity.runtime.directive.MacroParseException;
import bboss.org.apache.velocity.runtime.RuntimeConstants;
import static bboss.org.apache.velocity.runtime.RuntimeConstants.SpaceGobbling;
import org.slf4j.Logger;

/** Token Manager. */
@SuppressWarnings ("unused")
public class StandardParserTokenManager implements StandardParserConstants {
    private int fileDepth = 0;

    private int lparen = 0;
    private int rparen = 0;
    private int curlyLevel = 0;
    List stateStack = new ArrayList(50);

    private boolean inComment;
    private boolean inSet;

    /**
     * Our own trace method. Use sparsingly in production, since each
     * and every call will introduce an execution branch and slow down parsing.
     */
    public static void trace(String message)
    {
        StandardParser.trace(message);
    }

    /**
     * Switches to a new state (add some log to the default method)
     */
     public void switchTo(int lexState)
     {
        trace(" switch to " + lexStateNames[lexState]);
        SwitchTo(lexState);
     }

    public int getCurrentLexicalState()
    {
        return curLexState;
    }

    /**
     *  pops a state off the stack, and restores paren counts
     *
     *  @return boolean : success of operation
     */
    public boolean stateStackPop()
    {
        ParserState s;
        try
        {
            s = (ParserState) stateStack.remove(stateStack.size() - 1); // stack.pop
        }
        catch(IndexOutOfBoundsException e)
        {
            // empty stack
            lparen=0;
            switchTo(DEFAULT);
            return false;
        }

        trace(" stack pop (" + stateStack.size() + ")");
        lparen = s.lparen;
        rparen = s.rparen;
        curlyLevel = s.curlyLevel;

        switchTo(s.lexstate);

        return true;
    }

    /**
     *  pushes the current state onto the 'state stack',
     *  and maintains the parens counts
     *  public because we need it in PD &amp; VM handling
     *
     *  @return boolean : success.  It can fail if the state machine
     *     gets messed up (do don't mess it up :)
     */
    public boolean stateStackPush()
    {
        trace(" (" + stateStack.size() + ") pushing cur state : " + lexStateNames[curLexState] );

        ParserState s = new ParserState();
        s.lparen = lparen;
        s.rparen = rparen;
        s.curlyLevel = curlyLevel;
        s.lexstate = curLexState;

        stateStack.add(s); // stack.push

        lparen = 0;
        curlyLevel = 0;

        return true;
    }

    /**
     *  Clears all state variables, resets to
     *  start values, clears stateStack.  Call
     *  before parsing.
     */
    public void clearStateVars()
    {
        stateStack.clear();

        lparen = 0;
        rparen = 0;
        curlyLevel = 0;
        inComment = false;
        inSet = false;

        return;
    }

    public void setInSet(boolean value)
    {
        inSet = value;
    }

    public boolean isInSet()
    {
        return inSet;
    }

    /**
     * Holds the state of the parsing process.
     */
    private static class ParserState
    {
        int lparen;
        int rparen;
        int curlyLevel;
        int lexstate;
    }

    /**
     *  handles the dropdown logic when encountering a RPAREN
     */
    private void RPARENHandler()
    {
        /*
         *  Ultimately, we want to drop down to the state below
         *  the one that has an open (if we hit bottom (DEFAULT),
         *  that's fine. It's just text schmoo.
         */

        boolean closed = false;

        if (inComment)
            closed = true;

        while( !closed )
        {
            /*
             * look at current state.  If we haven't seen a lparen
             * in this state then we drop a state, because this
             * lparen clearly closes our state
             */

            if( lparen > 0)
            {
                /*
                 *  if rparen + 1 == lparen, then this state is closed.
                 * Otherwise, increment and keep parsing
                 */

                 if( lparen == rparen + 1)
                 {
                       stateStackPop();
                 }
                else
                {
                    rparen++;
                }

                 closed = true;
            }
            else
            {
                /*
                 * now, drop a state
                 */

                if(!stateStackPop())
                    break;
            }
        }
    }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }

  public StandardParser parser = null;
private final int jjStopStringLiteralDfa_3(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0, long active1){
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_3(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_3(0x2a00000L);
      case 91:
         return jjStopAtPos(0, 3);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x1000000000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_3(0x10L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_3(1, 23, 21);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_3(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_3(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_3(active0, 0x1000000000L);
      case 124:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_3(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_3(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_3(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_3(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_3(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_3(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_3(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_3(3, active0, 0L);
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjAddStates(0, 2); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(7, 8); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 4:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 10:
                  if (curChar == 35)
                     { jjAddStates(0, 2); }
                  break;
               case 12:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 13:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 21:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 92)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 15:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjAddStates(9, 10); }
                  break;
               case 11:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 1);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x2a00000L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 75;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(11, 16); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(20, 23); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(26, 27); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(11); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 6:
                  if (curChar == 10 && kind > 34)
                     kind = 34;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 10:
                  if (curChar == 46)
                     { jjCheckNAdd(11); }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(11, 12); }
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(14); }
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(14); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 23:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 25:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 28:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 60:
                  if (curChar == 45)
                     { jjCheckNAddStates(20, 23); }
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(61, 63); }
                  break;
               case 62:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 63:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 65:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(69); }
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(69); }
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(73); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(73); }
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(11, 16); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(16); }
                  }
                  else if (curChar == 123)
                     { jjAddStates(26, 29); }
                  else if (curChar == 92)
                     { jjCheckNAddStates(30, 33); }
                  if (curChar == 101)
                     { jjAddStates(34, 36); }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 8:
                  if (curChar == 102 && kind > 54)
                     kind = 54;
                  break;
               case 9:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(37, 38); }
                  break;
               case 15:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar == 125 && kind > 64)
                     kind = 64;
                  break;
               case 21:
                  if (curChar == 92)
                     { jjCheckNAddStates(30, 33); }
                  break;
               case 22:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 24:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
                  if (curChar == 92)
                     { jjAddStates(39, 40); }
                  break;
               case 29:
                  if (curChar == 101)
                     { jjAddStates(34, 36); }
                  break;
               case 30:
                  if (curChar == 100 && kind > 53)
                     kind = 53;
                  break;
               case 31:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 102 && kind > 55)
                     kind = 55;
                  break;
               case 33:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 101 && kind > 56)
                     kind = 56;
                  break;
               case 38:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 123)
                     { jjAddStates(26, 29); }
                  break;
               case 41:
                  if (curChar == 125 && kind > 53)
                     kind = 53;
                  break;
               case 42:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 125 && kind > 54)
                     kind = 54;
                  break;
               case 46:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 125 && kind > 55)
                     kind = 55;
                  break;
               case 49:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 125 && kind > 56)
                     kind = 56;
                  break;
               case 56:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 67:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(41, 42); }
                  break;
               case 71:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(43, 44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 75 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_15(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000L) != 0L)
            return 94;
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         if ((active0 & 0x400L) != 0L)
            return 57;
         if ((active0 & 0x10000000000000L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_15(int pos, long active0){
   return jjMoveNfa_15(jjStopStringLiteralDfa_15(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_15(){
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_15(0xa00000L);
      case 37:
         return jjStopAtPos(0, 42);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 9);
      case 45:
         return jjStartNfaWithStates_15(0, 38, 94);
      case 46:
         return jjMoveStringLiteralDfa1_15(0x400L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 11);
      case 61:
         return jjStartNfaWithStates_15(0, 52, 49);
      case 91:
         return jjStopAtPos(0, 7);
      case 93:
         return jjStopAtPos(0, 8);
      case 102:
         return jjMoveStringLiteralDfa1_15(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_15(0x1000000000L);
      case 123:
         return jjStopAtPos(0, 12);
      case 125:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_15(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_15(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_15(1, 23, 0);
         break;
      case 46:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_15(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_15(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_15(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_15(0, active0);
}
private int jjMoveStringLiteralDfa2_15(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_15(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_15(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_15(1, active0);
}
private int jjMoveStringLiteralDfa3_15(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_15(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_15(2, active0);
}
private int jjMoveStringLiteralDfa4_15(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_15(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_15(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_15(3, active0);
}
private int jjStartNfaWithStates_15(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_15(state, pos + 1);
}
private int jjMoveNfa_15(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(80, 82); }
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(45, 50); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(51, 54); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(66, 67); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  else if (curChar == 33)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 6:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 9:
                  if ((0xfffffffbefffffffL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 11:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 24:
                  if (curChar == 32)
                     { jjAddStates(68, 69); }
                  break;
               case 25:
                  if (curChar == 10)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 26:
               case 28:
                  if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 27:
                  if ((0xffffff7fefffffffL & l) != 0L)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 29:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 32)
                     { jjAddStates(70, 71); }
                  break;
               case 32:
                  if (curChar == 10)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 34:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 35:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 43:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 44:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 45:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 47:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 48:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 50:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 54:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 33 && kind > 51)
                     kind = 51;
                  break;
               case 56:
                  if (curChar == 46)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(60); }
                  break;
               case 63:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 65:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 68:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 79:
                  if (curChar == 45)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(80, 82); }
                  break;
               case 81:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 82:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  break;
               case 84:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(88); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(88); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 91:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(92); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(92); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(45, 50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 110)
                     { jjAddStates(72, 73); }
                  else if (curChar == 103)
                     { jjAddStates(74, 75); }
                  else if (curChar == 108)
                     { jjAddStates(76, 77); }
                  else if (curChar == 92)
                     { jjCheckNAddStates(78, 81); }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 9:
                  { jjCheckNAddStates(59, 62); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(82, 87); }
                  break;
               case 14:
                  if ((0x14404400000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 27:
                  { jjAddStates(55, 58); }
                  break;
               case 30:
                  if (curChar == 92)
                     { jjAddStates(70, 71); }
                  break;
               case 36:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 40:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 51:
                  if (curChar == 113 && kind > 49)
                     kind = 49;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 61:
                  if (curChar == 92)
                     { jjCheckNAddStates(78, 81); }
                  break;
               case 62:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 64:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 66:
                  if (curChar == 92)
                     { jjAddStates(90, 91); }
                  break;
               case 69:
                  if (curChar == 108)
                     { jjAddStates(76, 77); }
                  break;
               case 70:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 71:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 72:
                  if (curChar == 103)
                     { jjAddStates(74, 75); }
                  break;
               case 73:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 74:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 75:
                  if (curChar == 110)
                     { jjAddStates(72, 73); }
                  break;
               case 76:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 77:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 78:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(92, 93); }
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(59, 62); }
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(55, 58); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_16(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 31;
            return -1;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_16(int pos, long active0){
   return jjMoveNfa_16(jjStopStringLiteralDfa_16(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_16(){
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_16(0xa00000L);
      case 93:
         return jjMoveStringLiteralDfa1_16(0x20000000L);
      default :
         return jjMoveNfa_16(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_16(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_16(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_16(active0, 0x200000L);
      case 93:
         return jjMoveStringLiteralDfa2_16(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_16(0, active0);
}
private int jjMoveStringLiteralDfa2_16(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_16(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_16(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(2, 29);
         break;
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_16(1, active0);
}
private int jjStartNfaWithStates_16(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_16(state, pos + 1);
}
private int jjMoveNfa_16(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 31)
                     kind = 31;
                  break;
               case 7:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 9:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 12:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (kind > 31)
                     kind = 31;
                  if (curChar == 92)
                     { jjCheckNAddStates(96, 99); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 4:
                  if (kind > 31)
                     kind = 31;
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddStates(96, 99); }
                  break;
               case 6:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(6, 7); }
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 10:
                  if (curChar == 92)
                     { jjAddStates(100, 101); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 31)
                     kind = 31;
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_14(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_14(int pos, long active0){
   return jjMoveNfa_14(jjStopStringLiteralDfa_14(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_14(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_14(0xa00000L);
      default :
         return jjMoveNfa_14(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_14(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_14(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_14(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_14(0, active0);
}
private int jjMoveStringLiteralDfa2_14(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_14(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_14(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_14(1, active0);
}
private int jjStartNfaWithStates_14(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_14(state, pos + 1);
}
private int jjMoveNfa_14(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(12, 13); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 5:
                  if (curChar == 10 && kind > 26)
                     kind = 26;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 11:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 13:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 14:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(12, 13); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddStates(102, 105); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 8:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(8, 9); }
                  break;
               case 10:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 12:
                  if (curChar == 92)
                     { jjAddStates(3, 4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_5(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 70;
            return 1;
         }
         if ((active0 & 0x3a00000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x800000L) != 0L)
            return 23;
         return -1;
      case 2:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0, long active1){
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_5(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_5(0x2a00000L);
      case 40:
         return jjStopAtPos(0, 14);
      case 91:
         return jjStopAtPos(0, 3);
      case 102:
         return jjMoveStringLiteralDfa1_5(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0x1000000000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_5(0x10L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_5(1, 23, 23);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_5(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_5(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_5(active0, 0x1000000000L);
      case 124:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_5(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_5(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_5(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 36, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_5(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 37, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(3, active0, 0L);
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjAddStates(106, 108); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 1:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 12:
                  if (curChar == 35)
                     { jjAddStates(106, 108); }
                  break;
               case 14:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(109, 110); }
                  break;
               case 15:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 23:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 17:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 4:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               case 13:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_8(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 2;
         if ((active0 & 0x400L) != 0L)
            return 57;
         if ((active0 & 0x4000000000L) != 0L)
            return 100;
         if ((active0 & 0x10000000000000L) != 0L)
            return 49;
         if ((active0 & 0x1000L) != 0L)
            return 64;
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 63;
            return 62;
         }
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
            return 62;
         }
         return -1;
      case 2:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 2;
            return 62;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000000L) != 0L)
            return 62;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
            return 62;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_8(int pos, long active0){
   return jjMoveNfa_8(jjStopStringLiteralDfa_8(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_8(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_8(0x2a00000L);
      case 37:
         return jjStopAtPos(0, 42);
      case 40:
         return jjStopAtPos(0, 14);
      case 41:
         return jjStopAtPos(0, 15);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 9);
      case 45:
         return jjStartNfaWithStates_8(0, 38, 100);
      case 46:
         return jjMoveStringLiteralDfa1_8(0x400L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 11);
      case 61:
         return jjStartNfaWithStates_8(0, 52, 49);
      case 91:
         return jjStopAtPos(0, 7);
      case 93:
         return jjStopAtPos(0, 8);
      case 102:
         return jjMoveStringLiteralDfa1_8(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_8(0x1000000000L);
      case 123:
         return jjStartNfaWithStates_8(0, 12, 64);
      case 125:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_8(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_8(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_8(1, 23, 0);
         break;
      case 46:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_8(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_8(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_8(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_8(0, active0);
}
private int jjMoveStringLiteralDfa2_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_8(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_8(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_8(1, active0);
}
private int jjMoveStringLiteralDfa3_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_8(3, 36, 62);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_8(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_8(2, active0);
}
private int jjMoveStringLiteralDfa4_8(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_8(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_8(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_8(4, 37, 62);
         break;
      default :
         break;
   }
   return jjStartNfa_8(3, active0);
}
private int jjStartNfaWithStates_8(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_8(state, pos + 1);
}
private int jjMoveNfa_8(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 100;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(117, 122); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(123, 126); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(72, 73); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  else if (curChar == 33)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(95, 96); }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(86, 88); }
                  }
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 6:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 9:
                  if ((0xfffffffbefffffffL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 11:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 24:
                  if (curChar == 32)
                     { jjAddStates(68, 69); }
                  break;
               case 25:
                  if (curChar == 10)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 26:
               case 28:
                  if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 27:
                  if ((0xffffff7fefffffffL & l) != 0L)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 29:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 32)
                     { jjAddStates(70, 71); }
                  break;
               case 32:
                  if (curChar == 10)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 34:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 35:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 43:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 44:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 45:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 47:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 48:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 50:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 54:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 33 && kind > 51)
                     kind = 51;
                  break;
               case 56:
                  if (curChar == 46)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(60); }
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(127, 128); }
                  break;
               case 69:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 71:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 73:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 74:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(72, 73); }
                  break;
               case 85:
                  if (curChar == 45)
                     { jjCheckNAddStates(123, 126); }
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(86, 88); }
                  break;
               case 87:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 88:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 90:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(91, 92); }
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(94); }
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(94); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(95, 96); }
                  break;
               case 97:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(98); }
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(98); }
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(117, 122); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 63)
                        kind = 63;
                     { jjCheckNAdd(62); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(129, 132); }
                  else if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 64;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  if (curChar == 110)
                     { jjAddStates(133, 134); }
                  else if (curChar == 103)
                     { jjAddStates(135, 136); }
                  else if (curChar == 108)
                     { jjAddStates(137, 138); }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 9:
                  { jjCheckNAddStates(59, 62); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(82, 87); }
                  break;
               case 14:
                  if ((0x14404400000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 27:
                  { jjAddStates(55, 58); }
                  break;
               case 30:
                  if (curChar == 92)
                     { jjAddStates(70, 71); }
                  break;
               case 36:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 40:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 51:
                  if (curChar == 113 && kind > 49)
                     kind = 49;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 61:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(62); }
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  { jjCheckNAdd(62); }
                  break;
               case 63:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 64:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 65:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(65, 66); }
                  break;
               case 66:
                  if (curChar == 125 && kind > 64)
                     kind = 64;
                  break;
               case 67:
                  if (curChar == 92)
                     { jjCheckNAddStates(129, 132); }
                  break;
               case 68:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(68, 69); }
                  break;
               case 70:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
                  if (curChar == 92)
                     { jjAddStates(43, 44); }
                  break;
               case 75:
                  if (curChar == 108)
                     { jjAddStates(137, 138); }
                  break;
               case 76:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 77:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 78:
                  if (curChar == 103)
                     { jjAddStates(135, 136); }
                  break;
               case 79:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 80:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 81:
                  if (curChar == 110)
                     { jjAddStates(133, 134); }
                  break;
               case 82:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 83:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 84:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 92:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(139, 140); }
                  break;
               case 96:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(141, 142); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(59, 62); }
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(55, 58); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 100 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_17(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_17(int pos, long active0){
   return jjMoveNfa_17(jjStopStringLiteralDfa_17(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_17(){
   switch(curChar)
   {
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_17(0xa00000L);
      case 42:
         return jjMoveStringLiteralDfa1_17(0x10000000L);
      default :
         return jjMoveNfa_17(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_17(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_17(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_17(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_17(0, active0);
}
private int jjMoveStringLiteralDfa2_17(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_17(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_17(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_17(1, active0);
}
private int jjStartNfaWithStates_17(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_17(state, pos + 1);
}
private int jjMoveNfa_17(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_7(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000L) != 0L)
            return 94;
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         if ((active0 & 0x10000000000000L) != 0L)
            return 49;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_7(int pos, long active0){
   return jjMoveNfa_7(jjStopStringLiteralDfa_7(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_7(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_7(0xa00000L);
      case 37:
         return jjStopAtPos(0, 42);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 39);
      case 45:
         return jjStartNfaWithStates_7(0, 38, 94);
      case 47:
         return jjStopAtPos(0, 41);
      case 61:
         return jjStartNfaWithStates_7(0, 52, 49);
      case 93:
         return jjStopAtPos(0, 6);
      case 102:
         return jjMoveStringLiteralDfa1_7(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_7(0x1000000000L);
      default :
         return jjMoveNfa_7(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_7(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_7(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_7(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_7(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_7(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_7(0, active0);
}
private int jjMoveStringLiteralDfa2_7(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_7(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_7(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_7(1, active0);
}
private int jjMoveStringLiteralDfa3_7(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_7(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_7(2, active0);
}
private int jjMoveStringLiteralDfa4_7(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_7(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_7(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(4, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_7(3, active0);
}
private int jjStartNfaWithStates_7(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_7(state, pos + 1);
}
private int jjMoveNfa_7(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 94;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(80, 82); }
                  }
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(45, 50); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 45)
                     { jjCheckNAddStates(51, 54); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(66, 67); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAdd(57); }
                  else if (curChar == 33)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 4:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 33)
                     kind = 33;
                  break;
               case 6:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
               case 10:
                  if (curChar == 34)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 9:
                  if ((0xfffffffbefffffffL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 11:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 15:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(63, 67); }
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 17:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(16); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 24:
                  if (curChar == 32)
                     { jjAddStates(68, 69); }
                  break;
               case 25:
                  if (curChar == 10)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 26:
               case 28:
                  if (curChar == 39)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 27:
                  if ((0xffffff7fefffffffL & l) != 0L)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 29:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
                  if (curChar == 32)
                     { jjAddStates(70, 71); }
                  break;
               case 32:
                  if (curChar == 10)
                     { jjCheckNAddStates(55, 58); }
                  break;
               case 33:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 34:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 35:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 43:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 44:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 45:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 47:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 48:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 50:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 54:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 33 && kind > 51)
                     kind = 51;
                  break;
               case 56:
                  if (curChar == 46)
                     { jjCheckNAdd(57); }
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(60); }
                  break;
               case 63:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 65:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 67:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 68:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(66, 67); }
                  break;
               case 79:
                  if (curChar == 45)
                     { jjCheckNAddStates(51, 54); }
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(80, 82); }
                  break;
               case 81:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 82:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(83, 84); }
                  break;
               case 84:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(85, 86); }
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(88); }
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(88); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(89, 90); }
                  break;
               case 91:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(92); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(92); }
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(45, 50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 110)
                     { jjAddStates(72, 73); }
                  else if (curChar == 103)
                     { jjAddStates(74, 75); }
                  else if (curChar == 108)
                     { jjAddStates(76, 77); }
                  else if (curChar == 92)
                     { jjCheckNAddStates(78, 81); }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 9:
                  { jjCheckNAddStates(59, 62); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjAddStates(82, 87); }
                  break;
               case 14:
                  if ((0x14404400000000L & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 19:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(59, 62); }
                  break;
               case 27:
                  { jjAddStates(55, 58); }
                  break;
               case 30:
                  if (curChar == 92)
                     { jjAddStates(70, 71); }
                  break;
               case 36:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 37:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 40:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 51:
                  if (curChar == 113 && kind > 49)
                     kind = 49;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 58:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(88, 89); }
                  break;
               case 61:
                  if (curChar == 92)
                     { jjCheckNAddStates(78, 81); }
                  break;
               case 62:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(62, 63); }
                  break;
               case 64:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 66:
                  if (curChar == 92)
                     { jjAddStates(90, 91); }
                  break;
               case 69:
                  if (curChar == 108)
                     { jjAddStates(76, 77); }
                  break;
               case 70:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 71:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 72:
                  if (curChar == 103)
                     { jjAddStates(74, 75); }
                  break;
               case 73:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 74:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 75:
                  if (curChar == 110)
                     { jjAddStates(72, 73); }
                  break;
               case 76:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 77:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 78:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 86:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(92, 93); }
                  break;
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(94, 95); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 9:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(59, 62); }
                  break;
               case 27:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(55, 58); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 94 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_12(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_12(int pos, long active0){
   return jjMoveNfa_12(jjStopStringLiteralDfa_12(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_12(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_12(0xa00000L);
      default :
         return jjMoveNfa_12(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_12(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_12(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_12(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_12(0, active0);
}
private int jjMoveStringLiteralDfa2_12(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_12(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_12(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_12(1, active0);
}
private int jjStartNfaWithStates_12(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_12(state, pos + 1);
}
private int jjMoveNfa_12(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_13(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_13(int pos, long active0){
   return jjMoveNfa_13(jjStopStringLiteralDfa_13(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_13(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_13(0xa00000L);
      case 42:
         return jjMoveStringLiteralDfa1_13(0x8000000L);
      default :
         return jjMoveNfa_13(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_13(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_13(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_13(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_13(0, active0);
}
private int jjMoveStringLiteralDfa2_13(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_13(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_13(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_13(1, active0);
}
private int jjStartNfaWithStates_13(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_13(state, pos + 1);
}
private int jjMoveNfa_13(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 31;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1){
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 1);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_2(0x2a00000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_2(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_2(1, 23, 31);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_2(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 34;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  else if (curChar == 35)
                     { jjAddStates(146, 148); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(17, 18); }
                  }
                  if (curChar == 36)
                     { jjCheckNAddStates(149, 152); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 2:
                  if (curChar == 10 && kind > 34)
                     kind = 34;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddStates(149, 152); }
                  break;
               case 8:
               case 9:
                  if (curChar == 33)
                     { jjCheckNAdd(7); }
                  break;
               case 11:
                  if (curChar == 46 && kind > 80)
                     kind = 80;
                  break;
               case 14:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 16:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 19:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 20:
                  if (curChar == 35)
                     { jjAddStates(146, 148); }
                  break;
               case 22:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(153, 154); }
                  break;
               case 23:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(155, 158); }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 91 && kind > 80)
                     kind = 80;
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 92)
                     { jjCheckNAddStates(155, 158); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 15:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(159, 160); }
                  break;
               case 21:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 34 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_10(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 39;
         if ((active1 & 0x3000L) != 0L)
            return 18;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 45;
         if ((active1 & 0x1000L) != 0L)
            return 51;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_10(int pos, long active0, long active1){
   return jjMoveNfa_10(jjStopStringLiteralDfa_10(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_10(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_10(0x2a00000L, 0x0L);
      case 92:
         jjmatchedKind = 77;
         return jjMoveStringLiteralDfa1_10(0x0L, 0x1000L);
      default :
         return jjMoveNfa_10(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_10(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_10(1, 23, 45);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_10(active0, 0x200000L, active1, 0L);
      case 92:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_10(1, 76, 51);
         break;
      default :
         break;
   }
   return jjStartNfa_10(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_10(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_10(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_10(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_10(1, active0, 0L);
}
private int jjStartNfaWithStates_10(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_10(state, pos + 1);
}
private int jjMoveNfa_10(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 51;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 39:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 18:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(31, 32); }
                  else if (curChar == 35)
                     { jjAddStates(161, 162); }
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 51:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(31, 32); }
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                  }
                  break;
               case 1:
                  if ((0xffffffe7efffdbffL & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     { jjCheckNAddStates(163, 165); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 35)
                     { jjAddStates(166, 168); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(31, 32); }
                  }
                  if ((0xffffffe6efffd9ffL & l) != 0L)
                     { jjCheckNAddStates(169, 172); }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 36)
                     { jjCheckNAddStates(173, 176); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0xffffffe6efffd9ffL & l) != 0L)
                     { jjCheckNAddStates(169, 172); }
                  break;
               case 5:
                  if ((0xffffffe7efffdbffL & l) != 0L)
                     { jjCheckNAddStates(177, 179); }
                  break;
               case 6:
                  if ((0x2400L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(180, 182); }
                  break;
               case 7:
                  if ((0xffffffe7efffdbffL & l) != 0L)
                     { jjCheckNAddStates(180, 182); }
                  break;
               case 8:
                  if (curChar != 10)
                     break;
                  if (kind > 78)
                     kind = 78;
                  { jjCheckNAddStates(180, 182); }
                  break;
               case 9:
               case 10:
                  if (curChar == 13)
                     { jjCheckNAdd(8); }
                  break;
               case 11:
                  if (curChar == 36)
                     { jjCheckNAddStates(173, 176); }
                  break;
               case 13:
               case 14:
                  if (curChar == 33)
                     { jjCheckNAdd(12); }
                  break;
               case 16:
                  if (curChar == 46 && kind > 80)
                     kind = 80;
                  break;
               case 19:
                  if (curChar == 35)
                     { jjAddStates(161, 162); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjAddStates(68, 69); }
                  break;
               case 28:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 30:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 32:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 33:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(31, 32); }
                  break;
               case 34:
                  if (curChar == 35)
                     { jjAddStates(166, 168); }
                  break;
               case 36:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(183, 184); }
                  break;
               case 37:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 45:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 48:
                  if ((0xffffffe7efffdbffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddStates(163, 165); }
                  break;
               case 49:
                  if ((0xffffffe7efffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(49, 4); }
                  break;
               case 50:
                  if ((0xffffffe7efffdbffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 39:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 18:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(29, 30); }
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(27, 28); }
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 51:
                  if (curChar == 92)
                     { jjAddStates(185, 186); }
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(29, 30); }
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 79)
                        kind = 79;
                     { jjCheckNAddStates(163, 165); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(187, 190); }
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(169, 172); }
                  else if (curChar == 92)
                     { jjAddStates(185, 186); }
                  break;
               case 4:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(169, 172); }
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(177, 179); }
                  break;
               case 7:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(180, 182); }
                  break;
               case 12:
                  if (curChar == 91 && kind > 80)
                     kind = 80;
                  break;
               case 15:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(185, 186); }
                  break;
               case 20:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 17)
                     kind = 17;
                  { jjCheckNAdd(21); }
                  break;
               case 22:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 125 && kind > 17)
                     kind = 17;
                  break;
               case 26:
                  if (curChar == 92)
                     { jjCheckNAddStates(187, 190); }
                  break;
               case 27:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(29, 30); }
                  break;
               case 31:
                  if (curChar == 92)
                     { jjAddStates(70, 71); }
                  break;
               case 35:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 40:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(36, 37); }
                  break;
               case 41:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 48:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddStates(163, 165); }
                  break;
               case 49:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(49, 4); }
                  break;
               case 50:
                  if ((0xffffffffefffffffL & l) == 0L)
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(50); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(169, 172); }
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 79)
                        kind = 79;
                     { jjCheckNAddStates(163, 165); }
                  }
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(169, 172); }
                  break;
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(177, 179); }
                  break;
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(180, 182); }
                  break;
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               case 48:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAddStates(163, 165); }
                  break;
               case 49:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(49, 4); }
                  break;
               case 50:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 79)
                     kind = 79;
                  { jjCheckNAdd(50); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 51 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 25;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 31;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1){
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 1);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_1(0x2a00000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_1(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(1, 23, 31);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 34;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 4:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  else if (curChar == 35)
                     { jjAddStates(146, 148); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(17, 18); }
                  }
                  if (curChar == 36)
                     { jjCheckNAddStates(149, 152); }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     { jjCheckNAddStates(143, 145); }
                  break;
               case 1:
                  if ((0x2400L & l) != 0L && kind > 34)
                     kind = 34;
                  break;
               case 2:
                  if (curChar == 10 && kind > 34)
                     kind = 34;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddStates(149, 152); }
                  break;
               case 8:
               case 9:
                  if (curChar == 33)
                     { jjCheckNAdd(7); }
                  break;
               case 11:
                  if (curChar == 46 && kind > 80)
                     kind = 80;
                  break;
               case 14:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 16:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 19:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 20:
                  if (curChar == 35)
                     { jjAddStates(146, 148); }
                  break;
               case 22:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(153, 154); }
                  break;
               case 23:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 25:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     { jjCheckNAdd(5); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(155, 158); }
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(5); }
                  break;
               case 7:
                  if (curChar == 91 && kind > 80)
                     kind = 80;
                  break;
               case 10:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 92)
                     { jjCheckNAddStates(155, 158); }
                  break;
               case 13:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 15:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
                  if (curChar == 92)
                     { jjAddStates(159, 160); }
                  break;
               case 21:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 24:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 26:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(22, 23); }
                  break;
               case 27:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 34 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3a00000L) != 0L)
            return 15;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 21;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0, long active1){
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_6(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_6(0x2a00000L);
      case 91:
         return jjStopAtPos(0, 3);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_6(0x10L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_6(1, 23, 21);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_6(active0, 0x200000L);
      case 124:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_6(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_6(1, active0, 0L);
}
private int jjStartNfaWithStates_6(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_6(state, pos + 1);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 24;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjAddStates(0, 2); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(7, 8); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 15:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 4:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 6:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 9:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 10:
                  if (curChar == 35)
                     { jjAddStates(0, 2); }
                  break;
               case 12:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 13:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 21:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 92)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 15:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjAddStates(9, 10); }
                  break;
               case 11:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 14:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(12, 13); }
                  break;
               case 17:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 24 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_9(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x4000000000L) != 0L)
            return 96;
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            return 53;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 45;
         if ((active0 & 0x400L) != 0L)
            return 107;
         if ((active0 & 0x3a00000L) != 0L)
            return 67;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 73;
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 53;
         }
         return -1;
      case 2:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 53;
         }
         return -1;
      case 3:
         if ((active0 & 0x1000000000L) != 0L)
            return 53;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_9(int pos, long active0){
   return jjMoveNfa_9(jjStopStringLiteralDfa_9(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_9(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_9(0x2a00000L);
      case 37:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 16);
      case 42:
         return jjStopAtPos(0, 40);
      case 43:
         return jjStopAtPos(0, 39);
      case 44:
         return jjStopAtPos(0, 9);
      case 45:
         return jjStartNfaWithStates_9(0, 38, 96);
      case 46:
         return jjMoveStringLiteralDfa1_9(0x400L);
      case 47:
         return jjStopAtPos(0, 41);
      case 58:
         return jjStopAtPos(0, 11);
      case 61:
         return jjStartNfaWithStates_9(0, 52, 45);
      case 91:
         return jjStopAtPos(0, 7);
      case 93:
         return jjStopAtPos(0, 8);
      case 102:
         return jjMoveStringLiteralDfa1_9(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_9(0x1000000000L);
      case 123:
         return jjStopAtPos(0, 12);
      case 125:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_9(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_9(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_9(1, 23, 73);
         break;
      case 46:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_9(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_9(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_9(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_9(0, active0);
}
private int jjMoveStringLiteralDfa2_9(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_9(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_9(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_9(1, active0);
}
private int jjMoveStringLiteralDfa3_9(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_9(3, 36, 53);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_9(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_9(2, active0);
}
private int jjMoveStringLiteralDfa4_9(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_9(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_9(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_9(4, 37, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_9(3, active0);
}
private int jjStartNfaWithStates_9(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_9(state, pos + 1);
}
private int jjMoveNfa_9(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 108;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  else if (curChar == 46)
                     { jjCheckNAdd(97); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(90, 91); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddTwoStates(87, 89); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     { jjCheckNAddStates(191, 196); }
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(97, 107); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(197, 200); }
                  else if (curChar == 35)
                     { jjAddStates(201, 203); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(59, 60); }
                  }
                  else if (curChar == 33)
                  {
                     if (kind > 51)
                        kind = 51;
                  }
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 30;
                  else if (curChar == 39)
                     { jjCheckNAddStates(204, 207); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(208, 211); }
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 62)
                  {
                     if (kind > 47)
                        kind = 47;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 45)
                        kind = 45;
                  }
                  else if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 107:
               case 97:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(97, 98); }
                  break;
               case 67:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 10 && kind > 33)
                     kind = 33;
                  break;
               case 3:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
               case 6:
                  if (curChar == 34)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 5:
                  if ((0xfffffffbefffffffL & l) != 0L)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 7:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 11:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(212, 216); }
                  break;
               case 12:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 13:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xff000000000000L & l) != 0L)
                     { jjCheckNAdd(12); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 20:
                  if (curChar == 32)
                     { jjAddStates(217, 218); }
                  break;
               case 21:
                  if (curChar == 10)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 22:
               case 24:
                  if (curChar == 39)
                     { jjCheckNAddStates(204, 207); }
                  break;
               case 23:
                  if ((0xffffff7fefffffffL & l) != 0L)
                     { jjCheckNAddStates(204, 207); }
                  break;
               case 25:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 32)
                     { jjAddStates(219, 220); }
                  break;
               case 28:
                  if (curChar == 10)
                     { jjCheckNAddStates(204, 207); }
                  break;
               case 29:
                  if (curChar == 39 && kind > 35)
                     kind = 35;
                  break;
               case 30:
                  if (curChar == 38 && kind > 43)
                     kind = 43;
                  break;
               case 31:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 39:
                  if (curChar == 60 && kind > 45)
                     kind = 45;
                  break;
               case 40:
                  if (curChar == 61 && kind > 46)
                     kind = 46;
                  break;
               case 41:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 62 && kind > 47)
                     kind = 47;
                  break;
               case 43:
                  if (curChar == 61 && kind > 48)
                     kind = 48;
                  break;
               case 44:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 61 && kind > 49)
                     kind = 49;
                  break;
               case 46:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if (curChar == 61 && kind > 50)
                     kind = 50;
                  break;
               case 50:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 33 && kind > 51)
                     kind = 51;
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 56:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 58:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 60:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 61:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(59, 60); }
                  break;
               case 62:
                  if (curChar == 35)
                     { jjAddStates(201, 203); }
                  break;
               case 64:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(221, 222); }
                  break;
               case 65:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 73:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 86:
                  if (curChar == 45)
                     { jjCheckNAddStates(197, 200); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddTwoStates(87, 89); }
                  break;
               case 88:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 89:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(90, 91); }
                  break;
               case 91:
                  if (curChar != 46)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAddTwoStates(92, 93); }
                  break;
               case 94:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(95); }
                  break;
               case 95:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(95); }
                  break;
               case 99:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(100); }
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(100); }
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(101, 102); }
                  break;
               case 103:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(104); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  { jjCheckNAdd(104); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  { jjCheckNAddStates(191, 196); }
                  break;
               case 106:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(97, 107); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     { jjCheckNAdd(53); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(223, 226); }
                  else if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 35;
                  if (curChar == 110)
                     { jjAddStates(227, 228); }
                  else if (curChar == 103)
                     { jjAddStates(229, 230); }
                  else if (curChar == 108)
                     { jjAddStates(231, 232); }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 107:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 67:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 5:
                  { jjCheckNAddStates(208, 211); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(233, 238); }
                  break;
               case 10:
                  if ((0x14404400000000L & l) != 0L)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 15:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x7e0000007eL & l) != 0L)
                     { jjCheckNAddStates(208, 211); }
                  break;
               case 23:
                  { jjAddStates(204, 207); }
                  break;
               case 26:
                  if (curChar == 92)
                     { jjAddStates(219, 220); }
                  break;
               case 32:
                  if (curChar == 100 && kind > 43)
                     kind = 43;
                  break;
               case 33:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 124 && kind > 44)
                     kind = 44;
                  break;
               case 36:
                  if (curChar == 124)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 37:
                  if (curChar == 114 && kind > 44)
                     kind = 44;
                  break;
               case 38:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 47:
                  if (curChar == 113 && kind > 49)
                     kind = 49;
                  break;
               case 48:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 52:
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(53); }
                  break;
               case 54:
                  if (curChar == 92)
                     { jjCheckNAddStates(223, 226); }
                  break;
               case 55:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 57:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 59:
                  if (curChar == 92)
                     { jjAddStates(88, 89); }
                  break;
               case 63:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 66:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 68:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 69:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 74:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 76:
                  if (curChar == 108)
                     { jjAddStates(231, 232); }
                  break;
               case 77:
                  if (curChar == 116 && kind > 45)
                     kind = 45;
                  break;
               case 78:
                  if (curChar == 101 && kind > 46)
                     kind = 46;
                  break;
               case 79:
                  if (curChar == 103)
                     { jjAddStates(229, 230); }
                  break;
               case 80:
                  if (curChar == 116 && kind > 47)
                     kind = 47;
                  break;
               case 81:
                  if (curChar == 101 && kind > 48)
                     kind = 48;
                  break;
               case 82:
                  if (curChar == 110)
                     { jjAddStates(227, 228); }
                  break;
               case 83:
                  if (curChar == 101 && kind > 50)
                     kind = 50;
                  break;
               case 84:
                  if (curChar == 116 && kind > 51)
                     kind = 51;
                  break;
               case 85:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 93:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(239, 240); }
                  break;
               case 98:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(241, 242); }
                  break;
               case 102:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(243, 244); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(208, 211); }
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(204, 207); }
                  break;
               case 74:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 108 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_11(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1a00000L) != 0L)
            return 2;
         return -1;
      case 1:
         if ((active0 & 0x800000L) != 0L)
            return 0;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_11(int pos, long active0){
   return jjMoveNfa_11(jjStopStringLiteralDfa_11(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_11(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_11(0xa00000L);
      default :
         return jjMoveNfa_11(3, 0);
   }
}
private int jjMoveStringLiteralDfa1_11(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_11(1, 23, 0);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_11(active0, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_11(0, active0);
}
private int jjMoveStringLiteralDfa2_11(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_11(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_11(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_11(1, active0);
}
private int jjStartNfaWithStates_11(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_11(state, pos + 1);
}
private int jjMoveNfa_11(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 12;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 0:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               case 2:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 1:
                  if (kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            return 1;
         }
         if ((active0 & 0x3a00000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x800000L) != 0L)
            return 23;
         return -1;
      case 2:
         if ((active0 & 0x3000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0, long active1){
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_4(){
   switch(curChar)
   {
      case 28:
         return jjStopAtPos(0, 2);
      case 35:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_4(0x2a00000L);
      case 40:
         return jjStopAtPos(0, 14);
      case 91:
         return jjStopAtPos(0, 3);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x2000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_4(0x1000000000L);
      case 123:
         return jjStopAtPos(0, 72);
      case 124:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_4(0x10L);
      case 125:
         return jjStopAtPos(0, 73);
      default :
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 35:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         break;
      case 42:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_4(1, 23, 23);
         break;
      case 91:
         return jjMoveStringLiteralDfa2_4(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_4(active0, 0x1000000000L);
      case 124:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_4(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(2, 21);
         break;
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_4(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_4(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_4(3, 36, 1);
         break;
      case 115:
         return jjMoveStringLiteralDfa4_4(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_4(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_4(4, 37, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_4(3, active0, 0L);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 26;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 35)
                     { jjAddStates(106, 108); }
                  else if (curChar == 36)
                  {
                     if (kind > 19)
                        kind = 19;
                     { jjCheckNAddTwoStates(9, 10); }
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 17:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 36 && kind > 19)
                     kind = 19;
                  break;
               case 8:
                  if (curChar == 36)
                     { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 10:
                  if (curChar == 33 && kind > 20)
                     kind = 20;
                  break;
               case 11:
                  if (curChar != 36)
                     break;
                  if (kind > 19)
                     kind = 19;
                  { jjCheckNAddTwoStates(9, 10); }
                  break;
               case 12:
                  if (curChar == 35)
                     { jjAddStates(106, 108); }
                  break;
               case 14:
                  if ((0x100000200L & l) != 0L)
                     { jjAddStates(109, 110); }
                  break;
               case 15:
                  if (curChar == 40 && kind > 18)
                     kind = 18;
                  break;
               case 23:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xfffffff7efffffffL & l) != 0L && kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 17:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x7fffffe87fffffeL & l) != 0L && kind > 71)
                     kind = 71;
                  break;
               case 4:
                  if (curChar == 92)
                     { jjCheckNAddStates(111, 114); }
                  break;
               case 5:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(5, 6); }
                  break;
               case 7:
                  if (curChar == 92)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 9:
                  if (curChar == 92)
                     { jjAddStates(115, 116); }
                  break;
               case 13:
                  if (curChar == 116)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if (curChar == 125)
                     { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 19:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (kind > 22)
                     kind = 22;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2) && kind > 22)
                     kind = 22;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   15, 20, 23, 12, 13, 3, 4, 5, 6, 7, 8, 61, 63, 64, 65, 70, 
   71, 4, 5, 7, 61, 64, 10, 70, 19, 20, 44, 47, 54, 59, 22, 23, 
   24, 25, 31, 36, 39, 13, 14, 26, 27, 68, 69, 72, 73, 80, 82, 83, 
   84, 89, 90, 80, 83, 56, 89, 27, 29, 30, 33, 9, 11, 12, 13, 9, 
   16, 11, 12, 13, 24, 25, 31, 32, 76, 78, 73, 74, 70, 71, 62, 63, 
   64, 65, 14, 15, 17, 19, 24, 25, 59, 60, 66, 67, 87, 88, 91, 92, 
   6, 7, 8, 9, 10, 11, 8, 9, 10, 11, 17, 22, 25, 14, 15, 5, 
   6, 7, 8, 9, 10, 86, 88, 89, 90, 95, 96, 86, 89, 56, 95, 65, 
   66, 68, 69, 70, 71, 82, 84, 79, 80, 76, 77, 93, 94, 97, 98, 0, 
   1, 3, 25, 30, 33, 7, 8, 10, 11, 22, 23, 13, 14, 15, 16, 17, 
   18, 20, 22, 49, 4, 50, 39, 44, 47, 4, 5, 6, 10, 12, 13, 15, 
   16, 5, 6, 10, 7, 6, 9, 36, 37, 18, 19, 27, 28, 29, 30, 87, 
   89, 90, 91, 101, 102, 87, 90, 96, 101, 67, 72, 75, 23, 25, 26, 29, 
   5, 7, 8, 9, 5, 12, 7, 8, 9, 20, 21, 27, 28, 64, 65, 55, 
   56, 57, 58, 83, 85, 80, 81, 77, 78, 10, 11, 13, 15, 20, 21, 94, 
   95, 99, 100, 103, 104, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 10;
int defaultLexState = 10;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 75)
         {
            jjmatchedKind = 75;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         break;
       case 9:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_9();
         break;
       case 10:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_10();
         break;
       case 11:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_11();
         if (jjmatchedPos == 0 && jjmatchedKind > 74)
         {
            jjmatchedKind = 74;
         }
         break;
       case 12:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_12();
         break;
       case 13:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_13();
         if (jjmatchedPos == 0 && jjmatchedKind > 30)
         {
            jjmatchedKind = 30;
         }
         break;
       case 14:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_14();
         if (jjmatchedPos == 0 && jjmatchedKind > 30)
         {
            jjmatchedKind = 30;
         }
         break;
       case 15:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_15();
         break;
       case 16:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_16();
         break;
       case 17:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_17();
         if (jjmatchedPos == 0 && jjmatchedKind > 30)
         {
            jjmatchedKind = 30;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 74 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push every terminator character back into the stream
         */

        input_stream.backup(1);

        trace("REF_TERM :");

        stateStackPop();
         break;
      case 75 :
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        trace("DIRECTIVE_TERM :");

        input_stream.backup(1);
        stateStackPop();
         break;
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 19 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * if we find ourselves in REFERENCE or PRE_REFERENCE, we need to pop down
             * to end the previous ref
             */

            if (curLexState == REFERENCE || curLexState == PRE_REFERENCE || curLexState == PRE_OLD_REFERENCE)
            {
                stateStackPop();
            }

            int preReferenceState = parser.hyphenAllowedInIdentifiers ? PRE_OLD_REFERENCE : PRE_REFERENCE;

            trace( " $  : going to " + lexStateNames[preReferenceState]);

            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                stateStackPush();
            }
            switchTo(preReferenceState);
        }
         break;
      case 20 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * if we find ourselves in REFERENCE or PRE_REFERENCE, we need to pop down
             * to end the previous ref
             */

            if (curLexState == REFERENCE || curLexState == PRE_REFERENCE || curLexState == PRE_OLD_REFERENCE)
            {
                stateStackPop();
            }

            int preReferenceState = parser.hyphenAllowedInIdentifiers ? PRE_OLD_REFERENCE : PRE_REFERENCE;

            trace( " $  : going to " + lexStateNames[preReferenceState]);

            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                stateStackPush();
            }
            switchTo(preReferenceState);
        }
         break;
      case 21 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
       if (!inComment)
       {
           inComment = true;
            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                stateStackPush();
            }
           switchTo( IN_TEXTBLOCK );
       }
         break;
      case 22 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
            input_stream.backup(1);
            inComment = true;
            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                stateStackPush();
            }
            switchTo( IN_FORMAL_COMMENT);
        }
         break;
      case 23 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (!inComment)
        {
            inComment=true;
            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                stateStackPush();
            }
            switchTo( IN_MULTI_LINE_COMMENT );
        }
         break;
      case 24 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        if (! inComment)
        {
            /*
             * We can have the situation where #if($foo)$foo#end.
             * We need to transition out of REFERENCE before going to DIRECTIVE.
             * I don't really like this, but I can't think of a legal way
             * you are going into DIRECTIVE while in REFERENCE.  -gmj
             */

            if (curLexState == REFERENCE || curLexState == PRE_REFERENCE || curLexState == PRE_OLD_REFERENCE || curLexState == REFMODIFIER || curLexState == OLD_REFMODIFIER )
            {
                stateStackPop();
            }

            trace(" # :  going to PRE_DIRECTIVE" );

            /* do not push PRE states */
            if (curLexState != PRE_REFERENCE && curLexState != PRE_DIRECTIVE && curLexState != PRE_OLD_REFERENCE)
            {
                /* The hash can never come back to REFMOD3 */
                if (curLexState == REFMOD3)
                {
                  switchTo(DEFAULT);
                }
                stateStackPush();
            }
            switchTo(PRE_DIRECTIVE);
        }
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        stateStackPop();
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     stateStackPush();
     switchTo(REFINDEX);
         break;
      case 4 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       stateStackPop();
         break;
      case 5 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       if (curlyLevel == 1)
       {
           switchTo(ALT_VAL);
       }
       else
       {
           stateStackPop();
       }
         break;
      case 6 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     stateStackPop();
         break;
      case 12 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        ++curlyLevel;
         break;
      case 13 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        --curlyLevel;
        if (curLexState == ALT_VAL && curlyLevel == 0)
        {
            stateStackPop();
        }
         break;
      case 14 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment)
            lparen++;

        /*
         * If in REFERENCE and we have seen the dot, then move
         * to REFMOD2 -> Modifier()
         */

        if (curLexState == REFMODIFIER || curLexState == OLD_REFMODIFIER )
            switchTo( REFMOD2 );
         break;
      case 15 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
       RPARENHandler();
         break;
      case 16 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * need to simply switch back to REFERENCE, not drop down the stack
         * because we can (infinitely) chain, ala
         * $foo.bar().blargh().woogie().doogie()
         */

        switchTo( REFMOD3 );
         break;
      case 18 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (! inComment)
        {
            trace(" #set :  going to DIRECTIVE" );

            stateStackPush();
            setInSet(true);
            switchTo(DIRECTIVE);
        }

        /*
         *  need the LPAREN action
         */

        if (!inComment)
        {
            lparen++;

            /*
             * If in REFERENCE and we have seen the dot, then move
             * to REFMOD2 -> Modifier()
             */

            if (curLexState == REFMODIFIER || curLexState == OLD_REFMODIFIER )
                switchTo( REFMOD2 );
        }
         break;
      case 25 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!inComment)
        {
            if (curLexState == REFERENCE || curLexState == PRE_REFERENCE || curLexState == PRE_OLD_REFERENCE)
            {
                stateStackPop();
            }

            inComment = true;
            stateStackPush();
            switchTo(IN_SINGLE_LINE_COMMENT);
        }
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
     inComment = false;
     stateStackPop();
     if (curLexState == REFERENCE || curLexState == REFMOD3)
     {
       // end of reference: pop again
       stateStackPop();
     }
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
     if (curLexState == REFERENCE || curLexState == REFMOD3)
     {
       // end of reference: pop again
       stateStackPop();
     }
         break;
      case 28 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
     if (curLexState == REFERENCE || curLexState == REFMOD3)
     {
       // end of reference: pop again
       stateStackPop();
     }
         break;
      case 29 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    inComment = false;
    stateStackPop();
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        trace(" NEWLINE :");

        /* if (isInSet()) */
        setInSet(false);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    stateStackPop();
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         *  - if we are in DIRECTIVE and haven't seen ( yet, then also drop out.
         *      don't forget to account for the beloved yet wierd #set
         *  - finally, if we are in REFMOD2 (remember : $foo.bar( ) then " is ok!
         */

         if( curLexState == DIRECTIVE && !isInSet() && lparen == 0)
            stateStackPop();
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        stateStackPop();
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        switchTo(DIRECTIVE);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        switchTo(DIRECTIVE);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        stateStackPop();
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * Remove the double period if it is there
         */
        if (matchedToken.image.endsWith("..")) {
            input_stream.backup(2);
            matchedToken.image = matchedToken.image.substring(0,matchedToken.image.length()-2);
        }

        /*
         * check to see if we are in set
         *    ex.  #set($foo = $foo + 3)
         *  because we want to handle the \n after
         */

        if ( lparen == 0 && !isInSet() && curLexState != REFMOD2 && curLexState != REFINDEX && curLexState != ALT_VAL)
        {
            stateStackPop();
        }
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * check to see if we are in set
         *    ex.  #set $foo = $foo + 3
         *  because we want to handle the \n after
         */

        if ( lparen == 0 && !isInSet() && curLexState != REFMOD2 && curLexState != ALT_VAL)
        {
            stateStackPop();
    }
         break;
      case 67 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (curLexState == PRE_REFERENCE)
        {
            switchTo(REFERENCE);
        }
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (curLexState == PRE_OLD_REFERENCE)
        {
            switchTo(REFERENCE);
        }
         break;
      case 71 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /*
         * push the alpha char back into the stream so the following identifier
         * is complete
         */

        input_stream.backup(1);

        /*
         * and munge the <DOT> so we just get a . when we have normal text that
         * looks like a ref.ident
         */

        matchedToken.image = ".";

        int refModifierState = parser.hyphenAllowedInIdentifiers ? OLD_REFMODIFIER : REFMODIFIER;

        trace("DOT : switching to " + lexStateNames[refModifierState]);
        switchTo(refModifierState);
         break;
      case 72 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        ++curlyLevel;
         break;
      case 73 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        /* maybe it wasn't for our state */
        while (curlyLevel == 0 && curLexState != DEFAULT)
        {
            stateStackPop();
        }
        /* At this point, here are all the possible states:
         *   - DEFAULT, which means the '}' is schmoo
         *   - DIRECTIVE or REFMOD2, which means the '}' is a closing map curly
         *   - one of the other REFERENCE states or ALT_VAL, which means the '}' ends the reference
         * If we're in the last case, pop up state.
         */
        if (curLexState != DEFAULT && curLexState != DIRECTIVE && curLexState != REFMOD2)
        {
            stateStackPop();
        }
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor with parser. */
    public StandardParserTokenManager (StandardParser parserArg, CharStream stream){
    parser = parserArg;


    input_stream = stream;
  }

  /** Constructor with parser. */
  public StandardParserTokenManager (StandardParser parserArg, CharStream stream, int lexState){
    ReInit(parserArg, stream);
  }

  /** Reinitialise parser. */
  
  public void ReInit(StandardParser parserArg, CharStream stream)
  {
	this.parser = parserArg;

    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 108; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit( StandardParser parserArg, CharStream stream, int lexState)
  
  {
    ReInit(parserArg, stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 18 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "PRE_DIRECTIVE",
   "PRE_REFERENCE",
   "PRE_OLD_REFERENCE",
   "REFERENCE",
   "REFMODIFIER",
   "OLD_REFMODIFIER",
   "REFMOD3",
   "REFINDEX",
   "DIRECTIVE",
   "REFMOD2",
   "DEFAULT",
   "REFMOD",
   "IN_MULTILINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_SINGLE_LINE_COMMENT",
   "ALT_VAL",
   "IN_TEXTBLOCK",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x8dffffff3e07ffffL, 0x1f3c9L, 
};
static final long[] jjtoSkip = {
   0x40000000L, 0xc00L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xc00L, 
};
static final long[] jjtoMore = {
   0x81f80000L, 0x0L, 
};
    protected CharStream  input_stream;

    private final int[] jjrounds = new int[108];
    private final int[] jjstateSet = new int[2 * 108];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
