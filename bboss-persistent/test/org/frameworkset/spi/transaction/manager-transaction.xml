<?xml version="1.0" encoding='UTF-8'?>
<!--
声明式事务方法配置文件，包含正则表达式指定的方法名称
-->
<manager-config>
	<property id="tx.a" singlable="true" class="org.frameworkset.spi.transaction.A1" >
		<!--  
			在下面的节点对组件的业务方法事务进行定义
			只要将需要进行事务控制的方法配置在transactions中即可
		-->
		<transactions>
			<!-- 
				定义需要进行事务控制的方法
				属性说明：
				name-方法名称，可以是一个正则表达式，正则表达式的语法请参考jakarta-oro的相关文档，如果使用
				正则表达式的情况时，则方法中声明的方法参数将被忽略，但是回滚异常有效。
				pattern-方法名称的正则表达式匹配模式，模式匹配的顺序受配置位置的影响，如果配置在后面或者中间，
						那么会先执行之前的方法匹配，如果匹配上了就不会对该模式方法进行匹配了，否则执行匹配操作。
						如果匹配上特定的方法名称，那么这个方法就是需要进行事务控制的方法
						例如：模式testInt.*匹配接口中以testInt开头的任何方法
				txtype-需要控制的事务类型，取值范围：
				NEW_TRANSACTION，
				REQUIRED_TRANSACTION，
				MAYBE_TRANSACTION，
				NO_TRANSACTION
				RW_TRANSACTION
			-->
			<method name="testTXInvoke" txtype="NEW_TRANSACTION">
				<param type="java.lang.String"/>
			</method>			
			<method name="testTXInvoke" txtype="REQUIRED_TRANSACTION"/>			
			<method name="testTXInvokeWithReturn" txtype="REQUIRED_TRANSACTION"/>			
			<method name="testTXInvokeWithException" txtype="MAYBE_TRANSACTION"/>				
			<method name="testSameName" txtype="NO_TRANSACTION"/>			
			<method name="testSameName1">
				<param type="java.lang.String"/>
			</method>
			<!-- 			    
					定义使事务回滚的异常,如果没有明确声明需要回滚事务的异常，那么当有异常发生时，
					事务管理框架将自动回滚当前事务
					class-异常的完整类路径
					type-是否检测类型异常的子类控制标识，
					IMPLEMENTS只检测异常类本身，忽略异常类的子类；
					INSTANCEOF检查异常类本省及其所有子类					
				-->
			<method name="testTXWithSpecialExceptions">
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="INSTANCEOF"/>
					<exception class="org.frameworkset.spi.transaction.Exception1" 
					type="IMPLEMENTS"/>
				</rollbackexceptions>
				<param type="java.lang.String"/>
			</method>			
			<method name="testTXWithInstanceofExceptions">
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="INSTANCEOF"/>
				</rollbackexceptions>
				<param type="java.lang.String"/>
			</method>			
			<method name="testTXWithImplementsofExceptions">
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="IMPLEMENTS"/>
				</rollbackexceptions>
				<param type="java.lang.String"/>
			</method>
			<!-- 
					
					如果涉及的方法名称是一个正则表达式的匹配模式，则无需配置方法参数 
					如果指定的方法没有参数则无需指定参数
					注意参数出现的位置顺序和实际方法定义的参数顺序保持一致
					模式为* 表示匹配所有的方法
				-->				
			<!-- 
				通过模式方法进行声明式事务控制，同时声明了需要回滚事务的异常
				pattern【testPatternTX[1-9.]*】表示以testPatternTX开头的所有方法
			 -->			 
			<!--<method pattern="testPatternTX[1-9.]*">
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="IMPLEMENTS"/>
				</rollbackexceptions>
				<param type="java.lang.String"/>
			</method>-->			 
			<!--	通过模式方法进行声明式事务控制
				pattern【testPatternTX[1-9.]*】表示以testPatternTX开头的所有方法		
				 -->	
			<method pattern="testPatternTX[1-9.]*"/>				
							
			<!-- 
				系统级别的异常java.lang.NullPointException，导致事务回滚
			 -->
			<method name="testSystemException">	
				<rollbackexceptions>
					<exception class="org.frameworkset.spi.transaction.RollbackInstanceofException" 
					type="IMPLEMENTS"/>
				</rollbackexceptions>
			</method>
		</transactions>
	</property>
</manager-config>