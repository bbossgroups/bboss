<?xml version="1.0" encoding="UTF-8"?>

<poolman>

	<management-mode>local</management-mode>

	<datasource>

		<dbname>bspf</dbname>
		<loadmetadata>true</loadmetadata>
		<jndiName>bspf_datasource_jndiname</jndiName>
		<driver>oracle.jdbc.driver.OracleDriver</driver>
		<!--<url>jdbc:oracle :thin:@202.197.40.74:1521:orcl</url>-->
		<url>jdbc:oracle:thin:@202.197.40.73:1521:oa</url>
		<username>hndstest</username>
		<password>hndstest</password>

		<txIsolationLevel>READ_COMMITTED</txIsolationLevel>

		<nativeResults>true</nativeResults>

		<poolPreparedStatements>false</poolPreparedStatements>

		<initialConnections>2</initialConnections>
		<minimumSize>2</minimumSize>
		<maximumSize>50</maximumSize>
		<!--控制connection达到maximumSize是否允许再创建新的connection
			true：允许，缺省值
			false：不允许-->
		<maximumSoft>false</maximumSoft>

		<removeAbandoned>false</removeAbandoned>
		<!--
			占用connection锁超时，释放connection锁
		-->
		<userTimeout>180</userTimeout>

		<!--检测空闲队列中是否超过指定的时间connection线程执行的频率，即每过12妙执行一次扫描
			如果发现有connectionTimeout的connection则将其关闭，释放数据库资源。
			缺省为420秒
		-->
		<skimmerFrequency>120000</skimmerFrequency>
		<!--扫描空闲队列中超过指定的时间的connection，如果发现超过了，则将连接关闭，释放数据库资源-->
		<connectionTimeout>240000</connectionTimeout>
		<!--扫描空闲队列中超过指定的时间的connection，如果发现超过了，则将连接关闭，释放数据库资源，
			当清除connection的个数达到7个时退出本次扫描
			原则上shrinkBy的值应该介于maxsize和minimumSize的值之间
			缺省为5个
		-->
		<shrinkBy>5</shrinkBy>


		<!--
			定义数据库主键生成机制
			缺省的采用系统自带的主键生成机制，
			外步程序可以覆盖系统主键生成机制
			由值来决定
			auto:自动，一般在生产环境下采用该种模式，
			解决了单个应用并发访问数据库添加记录产生冲突的问题，效率高，如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
			composite：结合自动和实时从数据库中获取最大的主键值两种方式来处理，开发环境下建议采用该种模式，
			解决了多个应用同时访问数据库添加记录时产生冲突的问题，效率相对较低， 如果生产环境下有多个应用并发访问同一数据库时，必须采用composite模式
		-->
		<keygenerate>composite</keygenerate>

		<!--poolman的日志信息输出改用log4j来输出到日志文件，相关的配置见log4j.properties文件-->
		<!--<logFile>dbaccess.log</logFile>
			<debugging>true</debugging>-->


	</datasource>
	
	
</poolman>
