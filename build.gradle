configure(allprojects) { project ->
	group = PROJ_GROUP
	version = PROJ_VERSION	
	ext.jacksonversion = jacksonversion
	ext.mongodbversion = mongodbversion
	apply plugin: "java"
	apply plugin: "maven-publish"
	apply plugin: "eclipse"
	apply plugin: "idea"
	apply plugin: "signing"
	apply plugin: "java-library"
	eclipse {
		jdt {
			//if you want to alter the java versions (by default they are configured with gradle java plugin settings):
			sourceCompatibility = SOURCE_COMPILER_LEVEL
			targetCompatibility = TARGET_COMPILER_LEVEL
			javaRuntimeName = "../../org.eclipse.jdt.launching.JRE_CONTAINER"

		}
	}

	tasks.withType(JavaCompile) {
		
		sourceCompatibility = SOURCE_COMPILER_LEVEL
		targetCompatibility = TARGET_COMPILER_LEVEL
		options.encoding = 'UTF-8'
	}

	tasks.withType(Javadoc) {
		sourceCompatibility = JAVADOC_SOURCE_LEVEL
		targetCompatibility = JAVADOC_COMPILER_LEVEL
		options.encoding = 'UTF-8'
		// disable the crazy super-strict doclint tool in Java 8
        // noinspection SpellCheckingInspection
		if (JavaVersion.current().isJava8Compatible()) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}

	jar {
		manifest {
			attributes (
					'Implementation': version,
					'Specification-Version': version,
					'Implementation-Vendor': 'bbossgroups',
					'Implementation-ProductID': project.name,
					'Compile-Timestamp': new Date().format('yyyy-MM-dd HH:mm:ss'),
					'Compile-User': DEVELOPER_NAME
			)
		}
	}


	dependencies {
		testImplementation 'junit:junit:4.13'
		testImplementation 'org.assertj:assertj-core:3.16.1'
	}

	repositories {
		mavenLocal()		
		maven {
	        url "https://maven.aliyun.com/nexus/content/groups/public"
	    }
		mavenCentral()
		
		
	}
	if(project.getProperty('skipTest').equals("true"))
	{
		compileTestJava.enabled=false
		processTestResources.enabled=false
		testClasses.enabled = false
		test.enabled = false  
	}
}

 
configure(subprojects) { subproject ->
	task sourcesJar(type: Jar) {
		archiveClassifier = "sources"
		from sourceSets.main.allJava
	}

	task javaDocJar(type: Jar, dependsOn: javadoc) {
		archiveClassifier = "javadoc"
		from javadoc.destinationDir
	}
	artifacts {
		archives sourcesJar, javaDocJar
	}


	publishing {
		publications {
			mavenJava(MavenPublication) {
				groupId project.group
				artifactId project.name
				version "${version}"
				from components.java
				artifact sourcesJar
				artifact javaDocJar
//				versionMapping {
//					usage('java-api') {
//						fromResolutionOf('runtimeClasspath')
//					}
//					usage('java-runtime') {
//						fromResolutionResult()
//					}
//				}
//				from components.java
				pom {
					name = project.name
					packaging = 'jar'
					// optionally artifactId can be defined here
					description = PROJ_DESCRIPTION
					url = PROJ_WEBSITEURL

					scm {
						connection = scm_connection
						developerConnection = scm_developerConnection
						url = scm_url
					}

					licenses {
						license {
							name = PROJ_LICENCE_NAME
							url = PROJ_LICENCE_URL
						}
					}

					developers {
						developer {
							id = DEVELOPER_ID
							name = DEVELOPER_NAME
							email = DEVELOPER_EMAIL
						}
					}

				}
			}
		}
		repositories {
//			maven {
//				// change URLs to point to your repos, e.g. http://my.org/repo
//				def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//				def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
//				url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//			}
			maven {
				// change URLs to point to your repos, e.g. http://my.org/repo
				allowInsecureProtocol = true
				url = sonatype_url
				credentials {
					username = sonatype_username
					password = sonatype_password
				}

			}


		}
	}

	signing {
		sign publishing.publications.mavenJava
//		sign configurations.archives
	}
}